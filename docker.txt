Docker:
sudo service docker start
/etc/default/docker ( file for repository)
sudo docker build -t ambari-server . (This will create ambari-server image on local from dockerfile in current folder)

docker run -d -p 8080 -h amb0.mycorp.kom --name ambari-singlenode sequenceiq/ambari:1.6.0 --tag ambari-server=true
docker run -e BLUEPRINT=single-node-hdfs-yarn --link ambari-singlenode:ambariserver -t --rm --entrypoint /bin/sh sequenceiq/ambari:1.6.0 -c /tmp/install-cluster.sh
1. sequenceiq/ambari:latest

docker-machine create --driver virtualbox --engine-insecure-registry repo.docker.dev.ias us

docker-machine 

docker-machine ssh us

docker-machine env us --shell cmd


sudo vi /etc/hosts

docker@us:~$ cat /etc/hosts
127.0.0.1 us localhost localhost.local
#add repo
10.90.100.134 repo.docker.dev.ias


ping repo.docker.dev.ias

docker search repo.docker.dev.ias/base

docker pull repo.docker.dev.ias/turbine-couchbase:4.1.0


set DOCKER_TLS_VERIFY=1
set DOCKER_HOST=tcp://192.168.99.100:2376
set DOCKER_CERT_PATH=C:\Users\nitin.raul\.docker\machine\machines\us
set DOCKER_MACHINE_NAME=us



Dockers:
sudo docker ps -a (all running and non running containers)
docker ps (only running container)
docker stop {id or name} (stop container)
docker rm {id or name} (remove container)
sudo docker images
sudo docker rmi hello-world (remove image)
sudo docker stop container_id (stop container)
sudo docker rm container_id (remove container)
sudo docker port E3fefe 8080 (get host port on E3fefe docker container)

docker image tag image_name new_image_name:new_tag

docker run -e var:var_value -v host_path:container_path -p host_port: container_port --name container_name -d (to run in background) {image_name}

example:
docker run -v /opt/data:/var/lib/mysql -d -p 3306:3306 --name mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 mysql

execute mysql query in container:

docker exec mysql-db mysql -pdb_pass123 -e 'use foo; select * from myTable

Docker own registry:

docker run --name my-registry -p 5000:5000 --restart always registry:2
docker image tag nginx:latest localhost:5000/nginx:latest
docker push localhost:5000/nginx:latest
curl -X GET localhost:5000/v2/_catalog
docker pull localhost:5000/nginx


Docker Network:::

docker network ls
docker network inspect e5e1b7a28451
docker inspect {container_id or name}
docker run --name alpine-2 --network none alpine

docker network create -d bridge --gateway 182.18.0.1 --subnet 182.18.0.1/24 wp-mysql-network

docker run --name mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 --network wp-mysql-network -d mysql:5.6


docker rm docker rm $(docker ps -a -q)
docker rmi $(docker images -q)

docker run -it -v /Users/afsar.khan/fhe3_keys/:/Users/afsar.khan/fhe3_keys/ -e GOOGLE_APPLICATION_CREDENTIALS=/Users/afsar.khan/fhe3_keys/al_service_account_key.json  registry.gitlab.com/2sixty/package-registry/choreograph-artifacts/search-api:feature-AL-233-v1-1.0.0-SNAPSHOT-b076b3f2


docker exec -it bba005ceeaa4 /bin/bash

docker run -it --entrypoint /bin/sh xaxiseng/cs-vendor-mgmt:1.0.0 -s

docker run -it --entrypoint /bin/sh xaxiseng/cs-vendor-mgmt:1.0.0 -s

docker run -it -e "LOG_DIR=/home/appmgr/vendor-service/logs/" xaxiseng/cs-vendor-mgmt:1.0.1

 ============================== pass file and environment variables to docker containers ==============================
docker run -it --entrypoint /bin/sh -v /Users/afsar.khan/fhe3_keys:/Users/afsar.khan/fhe3_keys  --env GOOGLE_APPLICATION_CREDENTIALS=/Users/afsar.khan/fhe3_keys/al_service_account_key.json {image_name}

 ============================== ============================== ==============================

docker image build -t xaxiseng/sparkle-attributor-service:1.0.0-0-SNAPSHOT  ./

docker run -it -p 9092:9092 --entrypoint /bin/sh registry.gitlab.com/2sixty/mplatform-images/report-service-mgmt:report-service-develop-1.0.0-SNAPSHOT-0fc1331d -s

docker run -it --entrypoint /bin/sh registry.gitlab.com/2sixty/mplatform-images/report-service-mgmt:report-service-develop-1.0.0-SNAPSHOT-0fc1331d -s

java -jar -DSPRING.DATASOURCE.URL='jdbc:mariadb://host.docker.internal:3306/hierarchy' -DSPRING.LIQUIBASE.URL='jdbc:mariadb://host.docker.internal:3306/hierarchy' -DSPRING.CLOUD.CONFIG.URI='http://tbdocker1.int.iad2.xaxis.net/configuration' hierarchy-service-1.0.2.jar



docker run -it -p 9090:9090 --entrypoint /bin/sh xaxiseng/cs-vendor-mgmt:1.0.2 -s

docker run -it -p 9090:9090 --entrypoint /bin/sh xaxiseng/sparkle-attributor-service:1.9.9-9-SNAPSHOT -s


java -jar -DSPRING.DATASOURCE.URL='jdbc:mariadb://host.docker.internal:3306/vendor' -DSPRING.LIQUIBASE.URL='jdbc:mariadb://host.docker.internal:3306/vendor' -DSPRING.CLOUD.CONFIG.URI='http://tbdocker1.int.iad2.xaxis.net/configuration' vendor-service-1.0.2.jar


docker run -it -p 9093:9093 --entrypoint /bin/sh xaxiseng/option-list-mgmt:1.0.2 -s

java -jar -DSPRING.DATASOURCE.URL='jdbc:mariadb://host.docker.internal:3306/option-list-mgmt' -DSPRING.LIQUIBASE.URL='jdbc:mariadb://host.docker.internal:3306/option-list-mgmt' -DSPRING.CLOUD.CONFIG.URI='http://tbdocker1.int.iad2.xaxis.net/configuration' optionlist-service-1.0.2.jar

kubectl -n name_space -it xaxiseng/cs-vendor-mgmt:1.0.0 -- /bin/sh

docker rm docker rm $(docker ps -a -q)
docker rmi $(docker images -q)

